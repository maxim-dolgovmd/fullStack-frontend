{"ast":null,"code":"import { createApi, fetchBaseQuery } from '@reduxjs/toolkit/query/react';\nconst BASE_URL = 'http://localhost:4444';\nexport const postsApi = createApi({\n  reducerPath: 'posts',\n  baseQuery: fetchBaseQuery({\n    baseUrl: BASE_URL\n  }),\n  endpoints: builder => ({\n    getPost: builder.query({\n      query: sort => {\n        console.log(sort);\n        if (sort === 1) {\n          return {\n            url: `/posts?sort=createdAt`,\n            method: 'GET'\n          };\n        }\n        if (sort === 2) {\n          return {\n            url: `/posts?sort=viewsCount`,\n            method: 'GET'\n          };\n        }\n        return {\n          url: `/posts`,\n          method: 'GET'\n        };\n      }\n    }),\n    getTags: builder.query({\n      query: () => {\n        return {\n          url: '/tags',\n          method: 'GET'\n        };\n      }\n    }),\n    getOnePost: builder.query({\n      query: ({\n        id\n      }) => {\n        return {\n          url: `/posts/${id}`,\n          method: 'GET'\n        };\n      }\n    }),\n    onePost: builder.mutation({\n      query: ({\n        id\n      }) => {\n        return {\n          url: `/posts/${id}`,\n          method: 'GET'\n        };\n      }\n    }),\n    removePost: builder.mutation({\n      query: ({\n        id\n      }) => {\n        console.log(id);\n        return {\n          url: `/posts/${id}`,\n          method: 'DELETE',\n          headers: {\n            Authorization: window.localStorage.getItem('token')\n          }\n        };\n      }\n    }),\n    createPost: builder.mutation({\n      query: ({\n        title,\n        tags,\n        value,\n        imageUrl\n      }) => {\n        return {\n          url: '/posts',\n          method: 'POST',\n          body: {\n            title: title,\n            tags: tags.replaceAll(' ', '').split(','),\n            text: value,\n            imageUrl: imageUrl\n          },\n          headers: {\n            Authorization: window.localStorage.getItem('token')\n          }\n        };\n      }\n    }),\n    updatePost: builder.mutation({\n      query: ({\n        id,\n        title,\n        tags,\n        value,\n        imageUrl\n      }) => {\n        return {\n          url: `/posts/${id}`,\n          method: 'PATCH',\n          body: {\n            title: title,\n            tags: tags.replaceAll(' ', '').split(','),\n            text: value,\n            imageUrl: imageUrl\n          },\n          headers: {\n            Authorization: window.localStorage.getItem('token')\n          }\n        };\n      }\n    })\n  })\n});\nexport const {\n  useGetPostQuery,\n  useGetTagsQuery,\n  useGetOnePostQuery,\n  useOnePostMutation,\n  useRemovePostMutation,\n  useCreatePostMutation,\n  useUpdatePostMutation\n} = postsApi;","map":{"version":3,"names":["createApi","fetchBaseQuery","BASE_URL","postsApi","reducerPath","baseQuery","baseUrl","endpoints","builder","getPost","query","sort","console","log","url","method","getTags","getOnePost","id","onePost","mutation","removePost","headers","Authorization","window","localStorage","getItem","createPost","title","tags","value","imageUrl","body","replaceAll","split","text","updatePost","useGetPostQuery","useGetTagsQuery","useGetOnePostQuery","useOnePostMutation","useRemovePostMutation","useCreatePostMutation","useUpdatePostMutation"],"sources":["/Users/meefala/Desktop/practice/mern-blog-new/src/api/postsApi.ts"],"sourcesContent":["import {createApi, fetchBaseQuery} from '@reduxjs/toolkit/query/react'\n\ntype RemoveType = {\n  id: string\n}\n\ninterface PostType {\n  title: string,\n  tags: string,\n  value: string,\n  imageUrl: string\n}\n\ninterface UpdateType {\n  id: string,\n  title: string,\n  tags: string,\n  value: string,\n  imageUrl: string\n}\n\ninterface UserType {\n  avatarUrl: string,\n  createdAt: string,\n  email: string,\n  fullName: string,\n  passwordHash: string,\n  updatedAt: string,\n  _id: string,\n}\n\ntype ItemsType = {\n  createdAt: string,\n  paramsId?: string,\n  text: string,\n  updatedAt: string,\n  id: string,\n  user: UserType\n}\n\nconst BASE_URL = 'http://localhost:4444'\n\nexport const postsApi = createApi({\n  reducerPath: 'posts',\n  baseQuery: fetchBaseQuery(\n    {baseUrl: BASE_URL}\n  ),\n  endpoints: (builder) => ({\n    getPost: builder.query<ItemsType[], number>({\n      query: (sort) => {\n        console.log(sort)\n        if (sort === 1) {\n          return {\n            url: `/posts?sort=createdAt`,\n            method: 'GET'\n          }\n        }\n        if (sort === 2) {\n          return {\n            url: `/posts?sort=viewsCount`,\n            method: 'GET'\n          }\n        }\n        return {\n          url: `/posts`,\n          method: 'GET'\n        }\n      }\n    }),\n\n    getTags: builder.query({\n        query: () => {\n            return {\n                url: '/tags',\n                method: 'GET'\n            }\n        }\n    }),\n\n    getOnePost: builder.query({\n      query: ({id}) => {\n        return {\n          url: `/posts/${id}`,\n          method: 'GET'\n        }\n      }\n    }),\n\n    onePost: builder.mutation({\n      query: ({id}) => {\n        return {\n          url: `/posts/${id}`,\n          method: 'GET'\n        }\n      }\n    }),\n\n    removePost: builder.mutation<null, RemoveType>({\n      query: ({id}) => {\n        console.log(id)\n        return {\n          url: `/posts/${id}`,\n          method: 'DELETE',\n          headers: {\n            Authorization: (window.localStorage.getItem('token') as any)\n          }\n        }\n      }\n    }),\n\n    createPost: builder.mutation<null, PostType>({\n      query: ({title, tags, value, imageUrl}) => {\n        return {\n          url: '/posts',\n          method: 'POST',\n          body: {\n            title: title,\n            tags: tags.replaceAll(' ', '').split(','),\n            text: value,\n            imageUrl: imageUrl\n          },\n          headers: {\n            Authorization: (window.localStorage.getItem('token') as any)\n          }\n        }\n      }\n    }),\n\n    updatePost: builder.mutation<null, UpdateType>({\n      query: ({id, title, tags, value, imageUrl}) => {\n        return {\n          url: `/posts/${id}`,\n          method: 'PATCH',\n          body: {\n            title: title,\n            tags: tags.replaceAll(' ', '').split(','),\n            text: value,\n            imageUrl: imageUrl\n          },\n          headers: {\n            Authorization: (window.localStorage.getItem('token') as any)\n          }\n        }\n      }\n    })\n  }),\n})\n\n\nexport const { \n  useGetPostQuery, \n  useGetTagsQuery, \n  useGetOnePostQuery, \n  useOnePostMutation,\n  useRemovePostMutation, \n  useCreatePostMutation,\n  useUpdatePostMutation\n} = postsApi"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}