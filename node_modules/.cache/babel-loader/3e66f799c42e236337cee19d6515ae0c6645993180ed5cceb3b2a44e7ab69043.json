{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\nconst initialState = {\n  commentsNew: false,\n  commentsQuantity: []\n};\nconst commentsSlice = createSlice({\n  name: 'comments',\n  initialState,\n  reducers: {\n    setNewComments(state, action) {\n      state.commentsNew = action.payload;\n    },\n    setCommentsQuantity(state, action) {\n      state.commentsQuantity.push(action.payload);\n      const commentItem = state.commentsQuantity.find(obj => obj.count);\n      if (commentItem) {\n        commentItem.count++;\n      }\n      if (!commentItem) {\n        state.commentsQuantity.push({\n          ...action.payload,\n          count: 1\n        });\n        console.log(action.payload);\n      }\n\n      // if (action.payload.count) {\n      //     state.commentsQuantity.push({\n      //         ...action.payload,\n      //         count: action.payload.count++\n      //     })\n      // } else {\n      //     state.commentsQuantity.push({\n      //         ...action.payload,\n      //         count: 1\n      //     })\n      // }\n    }\n  }\n});\n\nexport const commentsType = state => state.commentsSlice;\nexport const {\n  setNewComments,\n  setCommentsQuantity\n} = commentsSlice.actions;\nexport default commentsSlice.reducer;","map":{"version":3,"names":["createSlice","initialState","commentsNew","commentsQuantity","commentsSlice","name","reducers","setNewComments","state","action","payload","setCommentsQuantity","push","commentItem","find","obj","count","console","log","commentsType","actions","reducer"],"sources":["/Users/meefala/Desktop/practice/mern-blog-new/src/redux/slices/comments.ts"],"sourcesContent":["import {PayloadAction, createSlice} from '@reduxjs/toolkit'\nimport { RootState } from '../store'\n\ninterface UserType {\n    avatarUrl: string,\n    createdAt: string,\n    email: string,\n    fullName: string,\n    passwordHash: string,\n    updatedAt: string,\n    _id: string,\n  }\n  \ntype ItemsType = {\n    count: any\n    createdAt: string,\n    tags: string[],\n    text: string,\n    title: string,\n    updatedAt: string,\n    _id: string,\n    user: UserType,\n    viewsCount: number\n}\n\ninterface InitialType {\n    commentsNew: boolean,\n    commentsQuantity: ItemsType[]\n}\n\n\nconst initialState: InitialType = {\n    commentsNew: false,\n    commentsQuantity: []\n}\n\nconst commentsSlice = createSlice({\n    name: 'comments',\n    initialState,\n    reducers: {\n        setNewComments(state, action: PayloadAction<boolean>) {\n            state.commentsNew = action.payload\n        },\n\n        setCommentsQuantity(state, action: PayloadAction<ItemsType>) {\n            state.commentsQuantity.push(action.payload)\n\n            const commentItem = state.commentsQuantity.find((obj) => obj.count)\n\n            if (commentItem) {\n                commentItem.count++\n            }\n\n            if (!commentItem) {\n                state.commentsQuantity.push({\n                    ...action.payload,\n                    count: 1\n                })\n                console.log(action.payload)\n            }\n\n            // if (action.payload.count) {\n            //     state.commentsQuantity.push({\n            //         ...action.payload,\n            //         count: action.payload.count++\n            //     })\n            // } else {\n            //     state.commentsQuantity.push({\n            //         ...action.payload,\n            //         count: 1\n            //     })\n            // }\n        }\n    }\n})\n\nexport const commentsType = (state: RootState) => state.commentsSlice\n\nexport const { setNewComments, setCommentsQuantity } = commentsSlice.actions\n\nexport default commentsSlice.reducer"],"mappings":"AAAA,SAAuBA,WAAW,QAAO,kBAAkB;AA+B3D,MAAMC,YAAyB,GAAG;EAC9BC,WAAW,EAAE,KAAK;EAClBC,gBAAgB,EAAE;AACtB,CAAC;AAED,MAAMC,aAAa,GAAGJ,WAAW,CAAC;EAC9BK,IAAI,EAAE,UAAU;EAChBJ,YAAY;EACZK,QAAQ,EAAE;IACNC,cAAcA,CAACC,KAAK,EAAEC,MAA8B,EAAE;MAClDD,KAAK,CAACN,WAAW,GAAGO,MAAM,CAACC,OAAO;IACtC,CAAC;IAEDC,mBAAmBA,CAACH,KAAK,EAAEC,MAAgC,EAAE;MACzDD,KAAK,CAACL,gBAAgB,CAACS,IAAI,CAACH,MAAM,CAACC,OAAO,CAAC;MAE3C,MAAMG,WAAW,GAAGL,KAAK,CAACL,gBAAgB,CAACW,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,KAAK,CAAC;MAEnE,IAAIH,WAAW,EAAE;QACbA,WAAW,CAACG,KAAK,EAAE;MACvB;MAEA,IAAI,CAACH,WAAW,EAAE;QACdL,KAAK,CAACL,gBAAgB,CAACS,IAAI,CAAC;UACxB,GAAGH,MAAM,CAACC,OAAO;UACjBM,KAAK,EAAE;QACX,CAAC,CAAC;QACFC,OAAO,CAACC,GAAG,CAACT,MAAM,CAACC,OAAO,CAAC;MAC/B;;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;IACJ;EACJ;AACJ,CAAC,CAAC;;AAEF,OAAO,MAAMS,YAAY,GAAIX,KAAgB,IAAKA,KAAK,CAACJ,aAAa;AAErE,OAAO,MAAM;EAAEG,cAAc;EAAEI;AAAoB,CAAC,GAAGP,aAAa,CAACgB,OAAO;AAE5E,eAAehB,aAAa,CAACiB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}